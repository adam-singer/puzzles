#!/usr/bin/env python
# slight variation on ynamara's solution
# --------------------------------------------------------------------------------- #

import time
import cProfile
import sys
import os
import re

class Machine(object):
    def __init__(self,label,src,dst,cost):
        self.label = label
        self.src = src
        self.dst = dst
        self.cost = cost

def load(edges):
    g = {}
    for s,t in edges:
        if s in g:
            g[s].append(t)
        else:
            g[s] = [ t ]
    return g

def add_(s,i):
    new = s | set()
    new.add(i)
    return new

class Facebull(object):

    def __init__(self):
        self.best = None
        self.costs = {}
        self.labels = {}

    def search(self,graph,curr,loopable,reached,used,cost,path=set()):
        if cost > self.cost:
            return
        for next in graph[curr]:
            m = (curr,next)
            if m in used:
                continue
            if next in loopable:
                self.add_cycle(graph,
                    loopable|path,
                    add_(reached,next),
                    add_(used,m),
                    cost+self.costs[m])
            elif next not in reached:
                self.search(graph,next,loopable,add_(reached,next),add_(used,m),
                    cost+self.costs[m],add_(path,next))

    def add_cycle(self,graph,loopable,reached=set(),used=set(),cost=0):
        if len(reached) == self.num_compounds:
            if cost < self.cost:
                self.cost = cost
                self.best = used | set()
            return
        tmp = graph.copy()
        for start in loopable:
            self.search(tmp,start,loopable,reached,used,cost)
            tmp[start] = {}

    def solve(self):
        self.best = set(self.machines)
        self.cost = sum( self.costs[t] for t in self.best )
        start = self.graph.keys()[0]
        self.add_cycle(self.graph,set([start]))

    def solution(self):
        labels = [ self.labels[t] for t in self.best ]
        labels.sort()
        return ' '.join(str(m) for m in labels)

    def total(self):
        return self.cost

    def input(self,f):
        machines = []
        compounds = set()
        for line in file(f).readlines():
            (label, src, dst, cost) = line.rstrip().split()
            label = int(label.replace('M',''))
            src = int(src.replace('C',''))
            dst = int(dst.replace('C',''))
            cost = int(cost)
            machines.append(Machine(label,src,dst,cost))
            compounds.add(src)
            self.costs[(src,dst)] = cost
            self.labels[(src,dst)] = label

        self.num_compounds = len(compounds)
        self.machines = [ (m.src,m.dst)
            for m in sorted(machines,cmp=lambda x,y:cmp(x.cost,y.cost))]
        self.graph = load(self.machines)

def testing(directory):
    timer = time.time
    infile = re.compile(r".*\.in$")
    for f in os.listdir(directory):
        if not infile.match(f):
            continue
        facebull = Facebull()
        facebull.input(directory + os.sep + f)
        t1 = timer()
        facebull.solve()
        t2 = timer()
        ans = facebull.solution().strip()
        fcheck = open(directory + os.sep + f.split('.')[0] + ".out")
        line = fcheck.read().split(os.linesep)[1]
        print f, 
        print " --> ",
        if ans != line:
            print "failure: %.2f" % (t2-t1)
        else:
            print "success: %.2f" % (t2-t1)

def main(argv=None):
    
    if argv is None:
        argv = sys.argv

    if len(argv) != 2:
        return -1

    if os.path.isfile(argv[1]):
        f = sys.argv[1]
        facebull = Facebull()
        facebull.input(f)
        facebull.solve()
        print facebull.total()
        print facebull.solution()
        return 0
    elif os.path.isdir(argv[1]):
        testing(argv[1])
        return 0
    else:
        return -1

if __name__ == "__main__":
    sys.exit(main())
