#!/usr/bin/python
# slight variation on ynamara's solution
# --------------------------------------------------------------------------------- #

import sys
import os
import re

def add_(s,i):
    new = s | set()
    new.add(i)
    return new

class Facebull(object):

    def __init__(self):
        self.best = set()
        self.costs = {}
        self.labels = {}
        self.graph = {}

    def collapse(self,G,path):
        sink = self.sink
        graph = {}
        nodes = set()
        for (s,d) in path:
            nodes.add(s)
            nodes.add(d)
        graph[sink] = {}
        for src in G:
            for dst,label in G[src].items():
                if dst not in nodes and src not in nodes:
                    if src in graph:
                        graph[src][dst] = label
                    else:
                        graph[src] = { dst : label } 
                elif src not in nodes and dst in nodes:
                    if src not in graph:
                        graph[src] = { dst : label }
                    elif sink in graph[src] \
                        and self.costs[graph[src][sink]] > self.costs[G[src][dst]]:
                        graph[src][sink] = label
                elif src in nodes and dst not in nodes:
                    if dst not in graph[sink] or \
                        (dst in graph[sink] and \
                        self.costs[graph[sink][dst]] > self.costs[G[src][dst]]):
                        graph[sink][dst] = label
        return graph

    def search(self,graph,curr,visited=set(),used=set(),cost=0,path=[]):
        if cost > self.cost:
            return
        if curr == self.sink and path:
            if len(visited) == self.num_compounds:
                if cost < self.cost:
                    self.cost = cost
                    self.best = used | set()
                return
            G = self.collapse(graph,path)
            for next,label in G[curr].items():
                if next in visited and next != self.sink:
                    continue
                self.search(
                    G, next,
                    add_(visited,next),
                    add_(used,label),
                    cost + self.costs[label],[(curr,next)])
        elif curr in graph:
            for next,label in graph[curr].items():
                if next in visited and next != self.sink:
                    continue
                self.search(
                    graph, next,
                    add_(visited,next),
                    add_(used,label),
                    cost + self.costs[label],path+[(curr,next)])

    def solve(self):
        self.sink = self.graph.keys()[0]
        self.search(self.graph,self.sink)

    def solution(self):
        labels = list(self.best)
        labels.sort()
        return ' '.join(str(m) for m in labels)

    def total(self):
        return self.cost

    def input(self,f):
        compounds = set()
        blank = re.compile("^\s+$")
        for line in file(f).readlines():
            if blank.match(line):
                continue
            (label, src, dst, cost) = line.rstrip().split()
            label = int(label.replace('M',''))
            src = int(src.replace('C',''))
            dst = int(dst.replace('C',''))
            cost = int(cost)
            compounds.add(src)
            self.costs[label] = cost
            if src in self.graph:
                self.graph[src][dst] = label
            else:
                self.graph[src] = { dst : label }
            self.best.add(label)
        self.num_compounds = len(compounds)
        self.cost = sum( self.costs[t] for t in self.best )

def testing(directory):
    import time
    import cProfile
    timer = time.time
    infile = re.compile(r".*\.in$")
    for f in os.listdir(directory):
        if not infile.match(f):
            continue
        facebull = Facebull()
        facebull.input(directory + os.sep + f)
        t1 = timer()
        facebull.solve()
        t2 = timer()
        ans = facebull.solution().strip()
        fcheck = open(directory + os.sep + f.split('.')[0] + ".out")
        line = fcheck.read().split(os.linesep)[1]
        print f, 
        print " --> ",
        if ans != line:
            print "failure: %.2f" % (t2-t1)
        else:
            print "success: %.2f" % (t2-t1)

def main(f):
    
    if os.path.isfile(f):
        facebull = Facebull()
        facebull.input(f)
        facebull.solve()
        print facebull.total()
        print facebull.solution()
        return 0
    elif os.path.isdir(f):
        testing(f)
        return 0
    else:
        return -1

if __name__ == "__main__":
    sys.exit(main(sys.argv[1]))
